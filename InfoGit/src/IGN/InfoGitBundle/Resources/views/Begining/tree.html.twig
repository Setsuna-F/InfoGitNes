{% extends "IGNInfoGitBundle::index.html.twig" %}

{% block urLogo %}
    {% if(gitType == "gitlab") %}
        <img src="https://gitlab.com/gitlab-com/gitlab-artwork/raw/master/logo/logo.png" width="25" height="25"/>
    {% elseif(gitType == "github") %}
        <img src="https://www.macupdate.com/images/icons256/39062.png" width="25" height="25"/>
    {% elseif(gitType == "bitbucket") %}
        <img src="https://technologyconversations.files.wordpress.com/2015/10/download.png" width="25" height="25"/>
    {% else %}
        <img src="https://git-for-windows.github.io/img/git_logo.png" width="25" height="25"/>
    {% endif %}
{% endblock %}

{% block arbreSelected %}<span class="sub_icon glyphicon glyphicon-tree-deciduous" style="color:white;"></span>{% endblock %}
{% block urlSelected %}<span class="sub_icon glyphicon glyphicon-plus-sign"></span>{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" type="text/css" href="{{ asset('assets/vendor/gitgraph.js/src/gitgraph.css') }}" />
{% endblock %}

{% block body %}
    <h2 class="gros-titre">Arbre des commits</h2>

    <canvas id="gitGraph"></canvas>

    <script src="{{ asset('assets/vendor/gitgraph.js/src/gitgraph.js') }}"></script>
    <script src="{#{ asset('res/graphegit.js') }#}"></script>



























    <script>


    /***********************
     *  CUSTOM TEMPLATES   *
     ***********************/

    var myTemplateConfig = {
      colors: ["#F00", "#0F0", "#00F"], // branches colors, 1 per column
      branch: {
        lineWidth: 8,
        spacingX: 50
      },
      commit: {
        spacingY: -80,
        dot: {
          size: 12
        },
        message: {
          displayAuthor: true,
          displayBranch: false,
          displayHash: false,
          font: "normal 12pt Arial"
        },
        shouldDisplayTooltipsInCompactMode: false, // default = true
        tooltipHTMLFormatter: function (commit) {
          return "<b>" + commit.sha1 + "</b>" + ": " + commit.message;
        }
      }
    };
    var myTemplate = new GitGraph.Template(myTemplateConfig);


    /***********************
     *    INITIALIZATION   *
     ***********************/

    var config = {
      template: "metro", // could be: "blackarrow" or "metro" or `myTemplate` (custom Template object)
      reverseArrow: true, // to make arrows point to ancestors, if displayed
      orientation: "vertical",
      // mode: "compact" // special compact mode: hide messages & compact graph
    };
    var gitGraph = new GitGraph(config);

    //var master = gitGraph.branch("master");
    //master.commit("Initial commit");

    //var dev = gitGraph.branch("dev");
    //dev.commit("Init dev");

    //var myArray = new Array();
/*
    myArray['master'] = gitGraph.branch('master');
    myArray['master'].commit("Initial commit");

    myArray['dev'] = gitGraph.branch('dev');
    myArray['dev'].commit("Init dev");
    myArray['master'].commit("Rajour du readme");
    myArray['dev'].commit("ajout d'un fichier de test sur la branche dev");
*/

    /*for (var i = 0; i < { {nbBranches} }; i++) {

    }*/
    var myArray = new Array();
    var mergeDefine = new Array();
    var isMergeDefine = false;
    //myArray['MASTER'] = gitGraph.branch('Master');
/*    myArray['master'] = gitGraph.branch('master');
    myArray['master'].commit("Initial commit");

    myArray['dev'] = gitGraph.branch('dev');
    myArray['dev'].commit("Init dev");
    myArray['master'].commit("Rajour du readme");
    myArray['dev'].commit("ajout d'un fichier de test sur la branche dev");
*/
{% for key, value in graphe %}
    for (var i = 0; i < mergeDefine.length; i++) {
        if(mergeDefine[i] == '{{value['branch']}}')
            isMergeDefine = true;
    }
    if(isMergeDefine){
        myArray['{{value['branch']}}'].commit({ message: '{{value['msg']}}' ,  author: "nom <so@so.com>" });
    }
    else{
        mergeDefine.push('{{value['branch']}}');
        myArray['{{value['branch']}}'] = gitGraph.branch('{{value['branch']}}');
        myArray['{{value['branch']}}'].commit({ message: '{{value['msg']}}' ,  author: "nom <so@so.com>" });
    }
    isMergeDefine = false;
    //{ % if myArray['MASTER'] is defined %}
    //    console.log('IF : { {value['branch']}}');
        //myArray['{ {value['branch']}}'].commit('{ {value['msg']}}');
    //{ % else %}
    //    console.log('ELSE : { {value['branch']}}');
        //myArray['{ {value['branch']}}'] = gitGraph.branch('{ {value['branch']}}');
    //    myArray['MASTER'] = gitGraph.branch('{ {value['branch']}}');
    //{ % endif %}
    /*    myArray['{ {key}}'] = gitGraph.branch('{ {key}}');
        //var a = { {value} };
        myArray['{ {key}}'].commit("");*/
{% endfor %}

//myArray['master'].commit("Initial commit");

/*
myArray['dev'] = gitGraph.branch('dev');
myArray['dev'].commit("Init dev");
myArray['dev'] = gitGraph.branch('dev');
myArray['dev'].commit("Init dev");
myArray['dev'] = gitGraph.branch('dev');
myArray['dev'].commit("Init dev");
myArray['dev'] = gitGraph.branch('dev');
myArray['dev'].commit("Init dev");
myArray['dev'] = gitGraph.branch('dev');
myArray['dev'].commit("Init dev");
myArray['dev'] = gitGraph.branch('dev');
myArray['dev'].commit("Init dev");
myArray['dev'] = gitGraph.branch('dev');
myArray['dev'].commit("Init dev");
myArray['dev'] = gitGraph.branch('dev');
myArray['dev'].commit("Init dev");
myArray['dev'] = gitGraph.branch('dev');
myArray['dev'].commit("Init dev");
*/


    </script>















    {#{ parent() }#}
{% endblock %}
